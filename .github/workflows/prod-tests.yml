name: Production Environment Tests

on:
  schedule:
    # Run twice daily - 8 AM and 8 PM UTC (Monday to Friday)
    - cron: '0 8,20 * * 1-5'
    # Run once on weekends at 10 AM UTC
    - cron: '0 10 * * 0,6'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'critical'
        type: choice
        options:
          - critical
          - all
          - user
          - pet
          - store
          - smoke
      environment:
        description: 'Target environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  api-tests:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    strategy:
      matrix:
        shard: [1, 2, 3]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
          
      - name: Create test results directory
        run: mkdir -p test-results
        
      - name: Run Critical Tests (Default)
        if: ${{ github.event.inputs.test_type == 'critical' || github.event.inputs.test_type == '' }}
        run: |
          npx playwright test tests/userAPIs.spec.ts --shard=${{ matrix.shard }}/3
          npx playwright test tests/petAPIs.spec.ts --shard=${{ matrix.shard }}/3
        env:
          BASE_URL: https://petstore.swagger.io/v2
          
      - name: Run All Tests (Sharded)
        if: ${{ github.event.inputs.test_type == 'all' }}
        run: npx playwright test --shard=${{ matrix.shard }}/3
        env:
          BASE_URL: https://petstore.swagger.io/v2
          
      - name: Run User API Tests
        if: ${{ github.event.inputs.test_type == 'user' }}
        run: npx playwright test tests/user*
        env:
          BASE_URL: https://petstore.swagger.io/v2
          
      - name: Run Pet API Tests
        if: ${{ github.event.inputs.test_type == 'pet' }}
        run: npx playwright test tests/pet*
        env:
          BASE_URL: https://petstore.swagger.io/v2
          
      - name: Run Store API Tests
        if: ${{ github.event.inputs.test_type == 'store' }}
        run: npx playwright test tests/store*
        env:
          BASE_URL: https://petstore.swagger.io/v2
          
      - name: Run Smoke Tests
        if: ${{ github.event.inputs.test_type == 'smoke' }}
        run: npx playwright test --grep "@smoke"
        env:
          BASE_URL: https://petstore.swagger.io/v2
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: prod-test-results-shard-${{ matrix.shard }}-${{ github.run_number }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30
          
      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: prod-playwright-report-shard-${{ matrix.shard }}-${{ github.run_number }}
          path: playwright-report/
          retention-days: 30

  merge-reports:
    runs-on: ubuntu-latest
    needs: api-tests
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download all reports
        uses: actions/download-artifact@v4
        with:
          pattern: prod-test-results-shard-*
          path: all-reports
          
      - name: Merge HTML reports
        run: npx playwright merge-reports --reporter html ./all-reports
        
      - name: Upload merged report
        uses: actions/upload-artifact@v4
        with:
          name: prod-merged-report-${{ github.run_number }}
          path: playwright-report/
          retention-days: 90
          
  health-check:
    runs-on: ubuntu-latest
    needs: [api-tests, merge-reports]
    if: always()
    steps:
      - name: Health Check Results
        run: |
          echo "Production test run completed at $(date)"
          if [ "${{ needs.api-tests.result }}" == "failure" ]; then
            echo "‚ùå Production tests FAILED"
            exit 1
          else
            echo "‚úÖ Production tests PASSED"
          fi
          
  notification:
    runs-on: ubuntu-latest
    needs: [api-tests, merge-reports, health-check]
    if: failure()
    steps:
      - name: Send critical failure notification
        run: |
          echo "üö® CRITICAL: Production tests failed at $(date)"
          echo "Immediate attention required!"
          echo "Check the merged test results for details"